---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALHELPER_SECRET_FILE: "talsecret.sops.yaml"
  TALHELPER_CONFIG_FILE: "talconfig.yaml"
  # renovate: datasource=docker depName=ghcr.io/siderolabs/installer
  TALOS_VERSION: v1.7.0
  TALOS_SCHEMATIC_ID: 376567988ad370138ad8b2698212367b8edcb69b5fd68c80be1f2ec7d603b4ba
  # renovate: datasource=docker depName=ghcr.io/siderolabs/kubelet
  KUBERNETES_VERSION: v1.30.0

env:
  TALOSCONFIG: "talosconfig"

tasks:
  bootstrap:
    desc: Bootstrap the Talos cluster
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    prompt: Bootstrap Talos on the '{{.cluster}}' cluster ... continue?
    dir: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/"
    cmds:
      - task: config-apply
        vars: &vars
          cluster: "{{.cluster}}"
      - task: bootstrap-install
        vars: *vars
      - task: fetch-kubeconfig
        vars: *vars
      - task: bootstrap-apps
        vars: *vars
      - talosctl health --server=false
    requires:
      vars: ["cluster"]

  gensecret:
    desc: Generate the Talos secrets
    dir: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/"
    cmds:
      - talhelper gensecret > {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/{{.TALHELPER_SECRET_FILE}}
      - task: :sops:.encrypt-file
        vars:
          file: "{{.TALHELPER_SECRET_FILE}}"
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/{{.TALHELPER_CONFIG_FILE}}" }
    status:
      - test -f "{{.TALHELPER_SECRET_FILE}}"

  genconfig:
    desc: Generate the Talos configs
    dir: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/"
    cmd: talhelper genconfig -s {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/{{.TALHELPER_SECRET_FILE}}
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/{{.TALHELPER_CONFIG_FILE}}" }
      - { msg: "Missing talhelper secret file", sh: "test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/{{.TALHELPER_SECRET_FILE}}" }

  config-apply:
    desc: Apply the Talos config on a node
    dir: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/"
    cmd: talhelper gencommand apply --extra-flags=--insecure | bash
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/{{.TALHELPER_CONFIG_FILE}}" }

  bootstrap-install:
    desc: Install the Talos cluster
    cmd: until talosctl --context {{.cluster}} --nodes {{.controller}} bootstrap; do sleep 10; done
    vars:
      controller:
        sh: talosctl --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[0]'
    requires:
      vars: ["cluster"]
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/clusterconfig/{{.TALOSCONFIG }}
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1

  bootstrap-apps:
    desc: Bootstrap core apps needed for Talos
    dir: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/"
    cmds:
      - until kubectl --kubeconfig {{.KUBERNETES_DIR}}/{{.cluster}}/kubeconfig wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --file ./apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --kubeconfig {{.KUBERNETES_DIR}}/{{.cluster}}/kubeconfig wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    requires:
      vars: ["cluster"]
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/clusterconfig/{{.TALOSCONFIG }}
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/apps/helmfile.yaml

  fetch-kubeconfig:
    desc: Fetch kubeconfig from Talos controllers
    cmd: |
      talosctl --context {{.cluster}} kubeconfig --nodes {{.controller}} \
          --force --force-context-name {{.cluster}} {{.KUBERNETES_DIR}}/{{.cluster}}/
    vars:
      controller:
        sh: talosctl --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[0]'
    requires:
      vars: ["cluster"]
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/clusterconfig/{{.TALOSCONFIG }}
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1

  upgrade:
    desc: Upgrade Talos on a node
    cmd: bash {{.TALOS_SCRIPTS_DIR}}/upgrade.sh "{{.cluster}}" "{{.node}}" "{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}" "{{.rollout}}"
    vars:
      rollout: '{{.rollout | default "false"}}'
    requires:
      vars: ["cluster", "node"]
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/clusterconfig/{{.TALOSCONFIG }}
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
      - talosctl --context {{.cluster}} --nodes {{.node}} get machineconfig >/dev/null 2>&1

  upgrade-rollout:
    desc: Rollout Talos upgrade on all nodes
    cmds:
      - flux --context {{.cluster}} suspend kustomization --all
      - kubectl cnpg --context {{.cluster}} maintenance set --reusePVC --all-namespaces
      - for: { var: nodes, split: "," }
        task: upgrade
        vars:
          cluster: "{{.cluster}}"
          node: "{{.ITEM}}"
          rollout: "true"
      - kubectl cnpg --context {{.cluster}} maintenance unset --reusePVC --all-namespaces
      - flux --context {{.cluster}} resume kustomization --all
      - task: :kubernetes:delete-failed-pods
        vars:
          cluster: "{{.cluster}}"
    vars:
      nodes:
        sh: talosctl --context {{.cluster}} config info --output json | jq --join-output '[.nodes[]] | join(",")'
    requires:
      vars: ["cluster"]
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/clusterconfig/{{.TALOSCONFIG }}
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
      - talosctl --context {{.cluster}} --nodes {{.nodes}} get machineconfig >/dev/null 2>&1

  upgrade-k8s:
    desc: Upgrade the clusters k8s version
    cmd: talosctl --context {{.cluster}} --nodes {{.controller}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars:
      controller:
        sh: talosctl --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[0]'
    requires:
      vars: ["cluster"]
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/clusterconfig/{{.TALOSCONFIG }}
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
      - talosctl --context {{.cluster}} --nodes {{.node}} get machineconfig >/dev/null 2>&1

  soft-nuke:
    desc: Resets nodes back to maintenance mode so you can re-deploy again straight after
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    dir: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/"
    cmd: talhelper gencommand reset --extra-flags "--reboot --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --wait=false" | bash
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }

  hard-nuke:
    desc: Resets nodes back completely and reboots them
    prompt: This will destroy your cluster and reset the nodes... continue?
    dir: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/"
    cmd: talhelper gencommand reset --extra-flags "--reboot --graceful=false --wait=false" | bash
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }