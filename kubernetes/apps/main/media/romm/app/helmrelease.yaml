---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app romm
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 4.0.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      romm:
        labels:
          nfsMount: "true"
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: docker.io/rommapp/romm
              tag: 3.9.0@sha256:478544fe537a7b4976f2196f4fe465cbdec931b269d8f5167f5c354f718559a7
            env:
              TZ: Europe/Paris
              ENABLE_SCHEDULED_RESCAN: "true"
              SCHEDULED_RESCAN_CRON: "0 3 * * *"
              # ENABLE_SCHEDULED_UPDATE_SWITCH_TITLEDB: "false"
              # ENABLE_SCHEDULED_UPDATE_MAME_XML: "false"
              ENABLE_RESCAN_ON_FILESYSTEM_CHANGE: "true"
              RESCAN_ON_FILESYSTEM_CHANGE_DELAY: 5
              REDIS_HOST: dragonfly.database.svc.cluster.local
              REDIS_PORT: 6379
              ROMM_DB_DRIVER: postgresql
            envFrom:
              - secretRef:
                  name: romm-db-secret
              - secretRef:
                  name: romm-secret
            ports:
              - name: http
                containerPort: &port 8080
            resources:
              requests:
                memory: 350Mi
                cpu: 100m
              limits:
                memory: 1024Mi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
        supplementalGroups:
          - 1000
    service:
      app:
        controller: *app
        ports:
          http:
            port: *port
    route:
      app:
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Video
          gethomepage.dev/name: RomM
          gethomepage.dev/icon: romm.png
          gethomepage.dev/description: Retro Games
          gethomepage.dev/widget.type: romm
          gethomepage.dev/widget.url: http://romm.media:8080
          # gethomepage.dev/widget.username: "{{ `{{HOMEPAGE_VAR_KOMGA_USERNAME}}` }}"
          # gethomepage.dev/widget.password: "{{ `{{HOMEPAGE_VAR_KOMGA_PASSWORD}}` }}"
        hostnames: ["{{ .Release.Name }}.${SECRET_DOMAIN}"]
        parentRefs:
          - name: external
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - identifier: app
                port: *port
    persistence:
      assets:
        existingClaim: romm-assets
        globalMounts:
          - path: /romm/assets
            readOnly: false
      resources:
        existingClaim: *app
        globalMounts:
          - path: /romm/resources
            readOnly: false
      config:
        type: configMap
        name: romm-config
        globalMounts:
          - path: /romm/config/config.yml
            subPath: config.yml
      tmp:
        type: emptyDir
        medium: Memory
        globalMounts:
          - path: /tmp
      media:
        type: nfs
        server: ${NFS_ADDR:=temp}
        path: /mnt/tank/shared
        globalMounts:
          - path: /romm/library
            subPath: Games/Library
